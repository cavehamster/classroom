
Step6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000909  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000342  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000371  00000000  00000000  00001951  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001cc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define DELAY	100

int main(void){
	
	int currentLED = 0;
	DDRB = 0x3F;						// Data direction register for Port B - pins 0-5 set to output
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x3F;						// Set pins 0-5 to high
  84:	85 b9       	out	0x05, r24	; 5
	
	DDRD = 0xF0;						// Set top four bits as outputs, and the bottom 4 as inputs
  86:	80 ef       	ldi	r24, 0xF0	; 240
  88:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFC;						// Set the top four bits high, and configure the two switch inputs as pullups
  8a:	8c ef       	ldi	r24, 0xFC	; 252
  8c:	8b b9       	out	0x0b, r24	; 11

#define DELAY	100

int main(void){
	
	int currentLED = 0;
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
	DDRD = 0xF0;						// Set top four bits as outputs, and the bottom 4 as inputs
	PORTD = 0xFC;						// Set the top four bits high, and configure the two switch inputs as pullups
	
    while(1){							// Forever and ever and ever and ...
			
		if(C_CHECKBIT(RIGHT_SWITCH) == 0){
  92:	4b 99       	sbic	0x09, 3	; 9
  94:	0c c0       	rjmp	.+24     	; 0xae <main+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	ef e1       	ldi	r30, 0x1F	; 31
  98:	fe e4       	ldi	r31, 0x4E	; 78
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x1a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
			// Debounce
			_delay_ms(5);
			if(C_CHECKBIT(RIGHT_SWITCH) == 0);
  a2:	29 b1       	in	r18, 0x09	; 9
			// Right switch is pressed		
			currentLED++;
  a4:	01 96       	adiw	r24, 0x01	; 1
			if(currentLED > 3){
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	91 05       	cpc	r25, r1
  aa:	0c f0       	brlt	.+2      	; 0xae <main+0x2e>
  ac:	79 c0       	rjmp	.+242    	; 0x1a0 <main+0x120>
				currentLED = 0;
			}
		}
	
		if(C_CHECKBIT(LEFT_SWITCH) == 0){
  ae:	4a 99       	sbic	0x09, 2	; 9
  b0:	0a c0       	rjmp	.+20     	; 0xc6 <main+0x46>
  b2:	ef e1       	ldi	r30, 0x1F	; 31
  b4:	fe e4       	ldi	r31, 0x4E	; 78
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x36>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
			// Debounce
			_delay_ms(5);
			if(C_CHECKBIT(LEFT_SWITCH) == 0);
  be:	29 b1       	in	r18, 0x09	; 9
			// Left switch is pressed
			currentLED--;
  c0:	01 97       	sbiw	r24, 0x01	; 1
			if(currentLED < 0){
  c2:	0a f4       	brpl	.+2      	; 0xc6 <main+0x46>
  c4:	4e c0       	rjmp	.+156    	; 0x162 <main+0xe2>
				currentLED = 3;
			}
		}
		
		switch(currentLED){
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	91 05       	cpc	r25, r1
  ca:	09 f1       	breq	.+66     	; 0x10e <main+0x8e>
  cc:	1c f4       	brge	.+6      	; 0xd4 <main+0x54>
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	49 f0       	breq	.+18     	; 0xe4 <main+0x64>
  d2:	df cf       	rjmp	.-66     	; 0x92 <main+0x12>
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	91 05       	cpc	r25, r1
  d8:	79 f1       	breq	.+94     	; 0x138 <main+0xb8>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	91 05       	cpc	r25, r1
  de:	09 f4       	brne	.+2      	; 0xe2 <main+0x62>
  e0:	40 c0       	rjmp	.+128    	; 0x162 <main+0xe2>
  e2:	d7 cf       	rjmp	.-82     	; 0x92 <main+0x12>
			case 0:
				C_CLEARBIT(UPPER_RIGHT_YELLOW);
  e4:	2d 98       	cbi	0x05, 5	; 5
  e6:	ff ef       	ldi	r31, 0xFF	; 255
  e8:	21 ee       	ldi	r18, 0xE1	; 225
  ea:	34 e0       	ldi	r19, 0x04	; 4
  ec:	f1 50       	subi	r31, 0x01	; 1
  ee:	20 40       	sbci	r18, 0x00	; 0
  f0:	30 40       	sbci	r19, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x6c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
				_delay_ms(DELAY);
				C_SETBIT(UPPER_RIGHT_YELLOW);
  f8:	2d 9a       	sbi	0x05, 5	; 5
  fa:	4f ef       	ldi	r20, 0xFF	; 255
  fc:	e1 ee       	ldi	r30, 0xE1	; 225
  fe:	f4 e0       	ldi	r31, 0x04	; 4
 100:	41 50       	subi	r20, 0x01	; 1
 102:	e0 40       	sbci	r30, 0x00	; 0
 104:	f0 40       	sbci	r31, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
 10c:	c2 cf       	rjmp	.-124    	; 0x92 <main+0x12>
				_delay_ms(DELAY);
				break;
			case 1:
				C_CLEARBIT(UPPER_LEFT_YELLOW);
 10e:	2c 98       	cbi	0x05, 4	; 5
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	31 ee       	ldi	r19, 0xE1	; 225
 114:	44 e0       	ldi	r20, 0x04	; 4
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	40 40       	sbci	r20, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x96>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0xa0>
 120:	00 00       	nop
				_delay_ms(DELAY);
				C_SETBIT(UPPER_LEFT_YELLOW);
 122:	2c 9a       	sbi	0x05, 4	; 5
 124:	ef ef       	ldi	r30, 0xFF	; 255
 126:	f1 ee       	ldi	r31, 0xE1	; 225
 128:	24 e0       	ldi	r18, 0x04	; 4
 12a:	e1 50       	subi	r30, 0x01	; 1
 12c:	f0 40       	sbci	r31, 0x00	; 0
 12e:	20 40       	sbci	r18, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xaa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb4>
 134:	00 00       	nop
 136:	ad cf       	rjmp	.-166    	; 0x92 <main+0x12>
				_delay_ms(DELAY);
				break;
			case 2:
				C_CLEARBIT(LOWER_LEFT_YELLOW);
 138:	2a 98       	cbi	0x05, 2	; 5
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	41 ee       	ldi	r20, 0xE1	; 225
 13e:	e4 e0       	ldi	r30, 0x04	; 4
 140:	31 50       	subi	r19, 0x01	; 1
 142:	40 40       	sbci	r20, 0x00	; 0
 144:	e0 40       	sbci	r30, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xc0>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xca>
 14a:	00 00       	nop
				_delay_ms(DELAY);
				C_SETBIT(LOWER_LEFT_YELLOW);
 14c:	2a 9a       	sbi	0x05, 2	; 5
 14e:	ff ef       	ldi	r31, 0xFF	; 255
 150:	21 ee       	ldi	r18, 0xE1	; 225
 152:	34 e0       	ldi	r19, 0x04	; 4
 154:	f1 50       	subi	r31, 0x01	; 1
 156:	20 40       	sbci	r18, 0x00	; 0
 158:	30 40       	sbci	r19, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xd4>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xde>
 15e:	00 00       	nop
 160:	98 cf       	rjmp	.-208    	; 0x92 <main+0x12>
				_delay_ms(DELAY);
				break;
			case 3:
				C_CLEARBIT(LOWER_RIGHT_YELLOW);
 162:	2b 98       	cbi	0x05, 3	; 5
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	81 ee       	ldi	r24, 0xE1	; 225
 168:	94 e0       	ldi	r25, 0x04	; 4
 16a:	41 50       	subi	r20, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0xea>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xf4>
 174:	00 00       	nop
				_delay_ms(DELAY);
				C_SETBIT(LOWER_RIGHT_YELLOW);
 176:	2b 9a       	sbi	0x05, 3	; 5
 178:	ef ef       	ldi	r30, 0xFF	; 255
 17a:	f1 ee       	ldi	r31, 0xE1	; 225
 17c:	24 e0       	ldi	r18, 0x04	; 4
 17e:	e1 50       	subi	r30, 0x01	; 1
 180:	f0 40       	sbci	r31, 0x00	; 0
 182:	20 40       	sbci	r18, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xfe>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x108>
 188:	00 00       	nop
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	81 cf       	rjmp	.-254    	; 0x92 <main+0x12>
 190:	8f e1       	ldi	r24, 0x1F	; 31
 192:	9e e4       	ldi	r25, 0x4E	; 78
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x114>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x11a>
 19a:	00 00       	nop
		}
	
		if(C_CHECKBIT(LEFT_SWITCH) == 0){
			// Debounce
			_delay_ms(5);
			if(C_CHECKBIT(LEFT_SWITCH) == 0);
 19c:	89 b1       	in	r24, 0x09	; 9
 19e:	e1 cf       	rjmp	.-62     	; 0x162 <main+0xe2>
			if(currentLED > 3){
				currentLED = 0;
			}
		}
	
		if(C_CHECKBIT(LEFT_SWITCH) == 0){
 1a0:	4a 9b       	sbis	0x09, 2	; 9
 1a2:	f6 cf       	rjmp	.-20     	; 0x190 <main+0x110>
			_delay_ms(5);
			if(C_CHECKBIT(RIGHT_SWITCH) == 0);
			// Right switch is pressed		
			currentLED++;
			if(currentLED > 3){
				currentLED = 0;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	8e cf       	rjmp	.-228    	; 0xc6 <main+0x46>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
